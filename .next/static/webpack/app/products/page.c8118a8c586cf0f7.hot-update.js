"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/products/page",{

/***/ "(app-pages-browser)/./src/data/products.ts":
/*!******************************!*\
  !*** ./src/data/products.ts ***!
  \******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cleanEmptyCategories: () => (/* binding */ cleanEmptyCategories),\n/* harmony export */   cleanedCategories: () => (/* binding */ cleanedCategories),\n/* harmony export */   productCategories: () => (/* binding */ productCategories)\n/* harmony export */ });\n// 1. Fix duplicate products\nconst deduplicateProducts = (products)=>{\n    // If input is not an array, return empty array\n    if (!Array.isArray(products)) {\n        console.warn('deduplicateProducts received non-array input:', products);\n        return [];\n    }\n    // Filter out any non-object items\n    const validProducts = products.filter((product)=>product && typeof product === 'object' && 'id' in product);\n    const uniqueIds = new Set();\n    return validProducts.filter((product)=>{\n        if (uniqueIds.has(product.id)) {\n            return false;\n        }\n        uniqueIds.add(product.id);\n        return true;\n    });\n};\n// 2. Standardize voltage formats\nconst standardizeVoltage = (voltage)=>{\n    return voltage.replace(/[vV]/, 'V').replace(/[-\\/]/, '/').trim();\n};\n// 3. Standardize power formats\nconst standardizePower = (power)=>{\n    return power.toLowerCase().replace(/\\s+/g, '').replace(/kw/, 'KW');\n};\n// 4. Fix price inconsistencies\nconst validatePrice = (product)=>{\n    if (product.price < 0) {\n        product.price = 0;\n    }\n    return product;\n};\n// 5. Normalize specs format\nconst normalizeSpecs = (specs)=>{\n    // Si specs est undefined ou null, retourner un objet vide\n    if (!specs || typeof specs !== 'object') {\n        return {};\n    }\n    const normalizedSpecs = {};\n    try {\n        for (const [key, value] of Object.entries(specs)){\n            if (!key) continue; // Skip if key is empty or undefined\n            const normalizedKey = key.toLowerCase().replace(/\\s+/g, '_').replace(/[^\\w]/g, '');\n            if (typeof value === 'string') {\n                normalizedSpecs[normalizedKey] = value.trim();\n            } else {\n                normalizedSpecs[normalizedKey] = value;\n            }\n        }\n    } catch (error) {\n        console.warn('Error normalizing specs:', error);\n        return {};\n    }\n    return normalizedSpecs;\n};\n// Example fixes for specific categories:\nconst standardizeMotors = (product)=>{\n    if (product.specs.power) {\n        product.specs.power = standardizePower(product.specs.power);\n    }\n    if (product.specs.voltage) {\n        product.specs.voltage = standardizeVoltage(product.specs.voltage);\n    }\n    // Add protection class if missing for motors\n    if (!product.specs.protection && product.name.toLowerCase().includes('moteur')) {\n        product.specs.protection = 'IP55';\n    }\n    return product;\n};\nconst standardizeDisjunctors = (product)=>{\n    // Ensure consistent naming pattern\n    if (product.name.toLowerCase().includes('disjoncteur')) {\n        product.name = product.name.replace(/disj\\w+/i, 'DISJONCTEUR').toUpperCase();\n    }\n    return product;\n};\n// Main standardization function\nconst standardizeProduct = (product)=>{\n    // Basic validation\n    if (!product.id || !product.name) {\n        throw new Error(\"Invalid product data: \".concat(JSON.stringify(product)));\n    }\n    // Normalize product data\n    return {\n        ...product,\n        name: product.name.trim(),\n        specs: normalizeSpecs(product.specs),\n        price: Math.max(0, product.price),\n        active: Boolean(product.active)\n    };\n};\n// Commande et contrôle - Regroupé tous les éléments de commande\nconst commande_controle = {\n    boutons_poussoirs: {\n        industriels: [\n            {\n                id: \"P10056\",\n                name: \"BOUTON POUSSOIR SCHNEIDER\",\n                reference: \"ZBE-101\",\n                specs: {\n                    marque: \"SCHNEIDER\",\n                    type: \"Contact\",\n                    protection: \"IP65\"\n                },\n                price: 25000,\n                active: true\n            },\n            {\n                id: \"P10057\",\n                name: \"BOUTON POUSSOIR SCHNEIDER\",\n                reference: \"ZBV-B3\",\n                specs: {\n                    marque: \"SCHNEIDER\",\n                    type: \"Contact lumineux\",\n                    protection: \"IP65\"\n                },\n                price: 28000,\n                active: true\n            }\n        ]\n    },\n    interrupteurs: {\n        securite: [\n            {\n                id: \"P10193\",\n                name: \"INTERRUPTEUR DE SECURITE SOCOMEC\",\n                specs: {\n                    reference: \"22153304\",\n                    marque: \"SOCOMEC\",\n                    amperage: \"40A\",\n                    type: \"ILS\",\n                    protection: \"IP65\"\n                },\n                price: 178000,\n                active: true\n            }\n        ],\n        standard: [\n            {\n                id: \"P10058\",\n                name: \"INTERRUPTEUR SCHNEIDER\",\n                reference: \"L0036 L0001\",\n                specs: {\n                    marque: \"SCHNEIDER\",\n                    type: \"Standard\",\n                    protection: \"IP44\"\n                },\n                price: 45000,\n                active: true\n            }\n        ]\n    },\n    telecommandes: {\n        industrielles: [\n            {\n                id: \"P10028\",\n                name: \"MANETTE DE COMMANDE RM2M\",\n                reference: \"T.04.76.34.18\",\n                specs: {\n                    marque: \"RM2M\",\n                    type: \"Industrielle\",\n                    protection: \"IP65\"\n                },\n                price: 125000,\n                active: true\n            }\n        ]\n    }\n};\n// Protection électrique - Regroupé tous les éléments de protection\nconst protection_electrique = {\n    appareillage: {\n        disjoncteurs_modulaires: [\n            {\n                id: \"P10109\",\n                name: \"DISJONCTEUR MERLIN GERIN\",\n                reference: \"A9F74463\",\n                specs: {\n                    marque: \"MERLIN GERIN\",\n                    type: \"C60N\",\n                    calibre: \"63A\",\n                    poles: \"4P\",\n                    courbe: \"C\"\n                },\n                price: 66950,\n                active: true\n            },\n            {\n                id: \"P10110\",\n                name: \"DISJONCTEUR SCHNEIDER ACTI9\",\n                reference: \"A9P52616\",\n                specs: {\n                    marque: \"SCHNEIDER\",\n                    type: \"IC40\",\n                    calibre: \"16A\",\n                    poles: \"1P+N\",\n                    courbe: \"C\"\n                },\n                price: 8060,\n                active: true\n            }\n        ],\n        disjoncteurs_moteur: [\n            {\n                id: \"P10130\",\n                name: \"DISJONCTEUR MOTEUR TESYS GV2ME20\",\n                reference: \"GV2ME20\",\n                specs: {\n                    marque: \"SCHNEIDER\",\n                    series: \"TESYS POWER\",\n                    calibre: \"13-18A\",\n                    protection: \"Magnétothermique\"\n                },\n                price: 38000,\n                active: true\n            }\n        ]\n    },\n    securite: {\n        parafoudres: [\n            {\n                id: \"P10120\",\n                name: \"PARAFOUDRE TETRAPOLAIRE\",\n                specs: {\n                    type: \"Type 2\",\n                    courant: \"20KA\",\n                    tension: \"350V\",\n                    poles: \"4P\",\n                    options: \"Report à distance\"\n                },\n                price: 102700,\n                active: true\n            }\n        ],\n        fusibles: [\n            {\n                id: \"P10288\",\n                name: \"FUSIBLE INDUSTRIEL T2\",\n                specs: {\n                    type: \"aR\",\n                    courant: \"500A\",\n                    tension: \"690V\",\n                    pouvoir_coupure: \"120kA\"\n                },\n                price: 115556,\n                active: true\n            }\n        ]\n    }\n};\n// Distribution électrique - Regroupé les éléments de distribution\nconst distribution_electrique = {\n    transformateurs: {\n        isolement: [\n            {\n                id: \"P10175\",\n                name: \"TRANSFORMATEUR D'ISOLEMENT SCHNEIDER\",\n                reference: \"ABL6TS10U\",\n                specs: {\n                    marque: \"SCHNEIDER\",\n                    tension_primaire: \"230-400V\",\n                    tension_secondaire: \"230V\",\n                    puissance: \"1000VA\",\n                    protection: \"IP23\"\n                },\n                price: 223650,\n                active: true\n            }\n        ]\n    },\n    onduleurs: {\n        online: [\n            {\n                id: \"P10117\",\n                name: \"ONDULEUR DELTA CRYSTAL\",\n                specs: {\n                    marque: \"DELTA\",\n                    series: \"CRYSTAL\",\n                    puissance: \"3000VA\",\n                    technologie: \"Online double conversion\",\n                    autonomie: \"10min\"\n                },\n                price: 615940,\n                active: true\n            }\n        ]\n    }\n};\n// Motorisation - Regroupé les moteurs et accessoires\nconst motorisation = {\n    moteurs: {\n        aluminium: [\n            {\n                id: \"P10009\",\n                name: \"MOTEUR ELECTRIQUE IE3\",\n                specs: {\n                    puissance: \"2.2kW\",\n                    vitesse: \"1500tr/min\",\n                    protection: \"IP55\",\n                    rendement: \"IE3\",\n                    fixation: \"B35\"\n                },\n                price: 335790,\n                active: true\n            }\n        ],\n        fonte: [\n            {\n                id: \"P10096\",\n                name: \"MOTEUR ELECTRIQUE FONTE\",\n                specs: {\n                    puissance: \"7.5kW\",\n                    vitesse: \"1500tr/min\",\n                    protection: \"IP55\",\n                    fixation: \"B3\"\n                },\n                price: 699500,\n                active: true\n            }\n        ]\n    },\n    motoreducteurs: {\n        helicoidal: [\n            {\n                id: \"P10001\",\n                name: \"MOTOREDUCTEUR IRAM83\",\n                specs: {\n                    type: \"IRAM83\",\n                    moteur: \"160M4A\",\n                    puissance: \"11kW\",\n                    rapport: \"18.47\",\n                    vitesse_sortie: \"76tr/min\",\n                    arbre: \"50x100mm\"\n                },\n                price: 2700000,\n                active: true\n            }\n        ]\n    }\n};\n// Câblage et connexion - Regroupé les éléments de câblage\nconst cablage_connexion = {\n    cables: {\n        industriels: [\n            {\n                id: \"P10111\",\n                name: \"CABLE R2V 3G4\",\n                specs: {\n                    type: \"R2V\",\n                    section: \"3x4mm²\",\n                    longueur: \"100m\",\n                    tension: \"0.6/1kV\"\n                },\n                price: 265200,\n                active: true\n            },\n            {\n                id: \"P10129\",\n                name: \"CABLE R2V 3G2.5\",\n                specs: {\n                    type: \"R2V\",\n                    section: \"3x2.5mm²\",\n                    tension: \"0.6/1kV\"\n                },\n                price: 1885,\n                active: true\n            }\n        ]\n    },\n    connectique: {\n        bornes: [\n            {\n                id: \"P10242\",\n                name: \"COSSE A FOURCHE 6mm²\",\n                specs: {\n                    type: \"Fourche\",\n                    section: \"6mm²\",\n                    conditionnement: \"50 pièces\"\n                },\n                price: 19500,\n                active: true\n            }\n        ]\n    }\n};\n// Éclairage - Regroupé tous les types d'éclairage\nconst eclairage = {\n    led: {\n        projecteurs: [\n            {\n                id: \"P10209\",\n                name: \"PROJECTEUR LED INDUSTRIEL\",\n                specs: {\n                    puissance: \"200W\",\n                    tension: \"230V AC\",\n                    protection: \"IP65\",\n                    flux_lumineux: \"20000lm\",\n                    precable: true\n                },\n                price: 185000,\n                active: true\n            }\n        ]\n    },\n    tubes: {\n        fluorescents: [\n            {\n                id: \"P10253\",\n                name: \"TUBE FLUORESCENT T8\",\n                specs: {\n                    puissance: \"18W\",\n                    longueur: \"60cm\",\n                    tension: \"220V\",\n                    culot: \"G13\"\n                },\n                price: 2500,\n                active: true\n            }\n        ]\n    }\n};\n// Mesure et détection - Regroupé les instruments de mesure\nconst mesure_detection = {\n    instruments: {\n        multimetres: [\n            {\n                id: \"P10065\",\n                name: \"MULTIMETRE NUMERIQUE\",\n                reference: \"2100\",\n                specs: {\n                    type: \"Numérique\",\n                    precision: \"0.5%\",\n                    protection: \"CAT III 600V\"\n                },\n                price: 75000,\n                active: true\n            }\n        ],\n        testeurs: [\n            {\n                id: \"P10043\",\n                name: \"TESTEUR ELECTRIQUE\",\n                reference: \"734563\",\n                specs: {\n                    marque: \"DUOYI\",\n                    type: \"Digital\",\n                    protection: \"IP54\"\n                },\n                price: 45000,\n                active: true\n            }\n        ]\n    },\n    capteurs: {\n        proximite: [\n            {\n                id: \"P10174\",\n                name: \"CAPTEUR INDUCTIF\",\n                reference: \"XS630B1PAM12\",\n                specs: {\n                    type: \"Inductif\",\n                    portee: \"10mm\",\n                    tension: \"24VDC\"\n                },\n                price: 50800,\n                active: true\n            }\n        ]\n    }\n};\n// Maintenance et outillage\nconst maintenance = {\n    filtration: {\n        huile: [\n            {\n                id: \"P10255\",\n                name: \"FILTRE A HUILE INDUSTRIEL\",\n                reference: \"1560B87305\",\n                specs: {\n                    references_alternatives: [\n                        \"MICRO MD013661\",\n                        \"LF3369\",\n                        \"FLEETGUARD\"\n                    ],\n                    type: \"Cartouche\",\n                    finesse: \"10µm\"\n                },\n                price: 18500,\n                active: true\n            }\n        ]\n    },\n    outillage: {\n        cles: [\n            {\n                id: \"P10229\",\n                name: \"CLIQUET 1/2 STAHLWILLE\",\n                specs: {\n                    marque: \"Stahlwille\",\n                    reference: \"13231011\",\n                    carre: \"1/2 pouce\",\n                    longueur: \"250mm\"\n                },\n                price: 85000,\n                active: true\n            }\n        ]\n    }\n};\n// Product categories definition\nconst productCategories = {\n    commande_controle,\n    protection_electrique,\n    distribution_electrique,\n    motorisation,\n    cablage_connexion,\n    eclairage,\n    mesure_detection,\n    maintenance\n};\n// Remove empty categories and subcategories\nconst cleanEmptyCategories = (categories)=>{\n    const cleanedCategories = {};\n    // Iterate through each category\n    Object.entries(categories).forEach((param)=>{\n        let [categoryName, category] = param;\n        const cleanedCategory = {};\n        // Iterate through subcategories\n        Object.entries(category).forEach((param)=>{\n            let [subcategoryName, subcategory] = param;\n            const cleanedSubcategory = {};\n            // Iterate through types\n            Object.entries(subcategory).forEach((param)=>{\n                let [typeName, products] = param;\n                // Only keep types that have active products\n                if (Array.isArray(products)) {\n                    const activeProducts = products.filter((p)=>p && p.active);\n                    if (activeProducts.length > 0) {\n                        cleanedSubcategory[typeName] = activeProducts;\n                    }\n                }\n            });\n            // Only keep subcategories that have types with products\n            if (Object.keys(cleanedSubcategory).length > 0) {\n                cleanedCategory[subcategoryName] = cleanedSubcategory;\n            }\n        });\n        // Only keep categories that have subcategories with products\n        if (Object.keys(cleanedCategory).length > 0) {\n            cleanedCategories[categoryName] = cleanedCategory;\n        }\n    });\n    return cleanedCategories;\n};\n// Apply fixes to categories\nconst fixedCategories = Object.entries(productCategories).reduce((acc, param)=>{\n    let [category, subcategories] = param;\n    acc[category] = Object.entries(subcategories).reduce((subAcc, param)=>{\n        let [subcategory, types] = param;\n        subAcc[subcategory] = Object.entries(types).reduce((typeAcc, param)=>{\n            let [type, products] = param;\n            // Apply specific fixes based on category\n            let fixedProducts = deduplicateProducts(products);\n            switch(category){\n                case 'motorisation':\n                    fixedProducts = fixedProducts.map(standardizeMotors);\n                    break;\n                case 'protection_electrique':\n                    fixedProducts = fixedProducts.map(standardizeDisjunctors);\n                    break;\n            }\n            // Apply general standardization\n            typeAcc[type] = fixedProducts.map(standardizeProduct);\n            return typeAcc;\n        }, {});\n        return subAcc;\n    }, {});\n    return acc;\n}, {});\n// Clean empty categories\nconst cleanedCategories = cleanEmptyCategories(fixedCategories);\n\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/data/products.ts\n"));

/***/ })

});